{"version":3,"sources":["../src/constants/trading.ts","../src/constants/network.ts","../src/constants/metadata.ts","../src/letsbonk-sdk.ts","../src/factory.ts","../src/utils/general.ts"],"names":[],"mappings":"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","file":"index.mjs","sourcesContent":["/**\n * Trading constants\n */\nexport const MIN_SOL_AMOUNT = 0.001; // Minimum SOL amount for transactions\nexport const MAX_SLIPPAGE_BASIS_POINTS = 5000n; // 50% maximum slippage\nexport const DEFAULT_PRIORITY_FEE = 5000; // 5000 micro-lamports\n\n/**\n * Pool constants\n */\nexport const INITIAL_VIRTUAL_BASE_RESERVES = 1073000000n; // 1.073 billion tokens\nexport const INITIAL_VIRTUAL_QUOTE_RESERVES = 30000000000n; // 30 SOL\nexport const INITIAL_REAL_BASE_RESERVES = 0n;\nexport const INITIAL_REAL_QUOTE_RESERVES = 0n;\n\n/**\n * Fee constants\n */\nexport const PLATFORM_FEE_BASIS_POINTS = 100n; // 1%\nexport const PROTOCOL_FEE_BASIS_POINTS = 25n; // 0.25%\n","/**\n * Network endpoints\n */\nexport const MAINNET_ENDPOINT = 'https://api.mainnet-beta.solana.com';\nexport const DEVNET_ENDPOINT = 'https://api.devnet.solana.com';\nexport const TESTNET_ENDPOINT = 'https://api.testnet.solana.com';\nexport const LOCALNET_ENDPOINT = 'http://localhost:8899';\n\n/**\n * Error codes\n */\nexport const ERROR_CODES = {\n  CONFIGURATION_ERROR: 'CONFIGURATION_ERROR',\n  VALIDATION_ERROR: 'VALIDATION_ERROR',\n  NETWORK_ERROR: 'NETWORK_ERROR',\n  TRANSACTION_ERROR: 'TRANSACTION_ERROR',\n  ACCOUNT_ERROR: 'ACCOUNT_ERROR',\n  PROGRAM_ERROR: 'PROGRAM_ERROR',\n  TIMEOUT_ERROR: 'TIMEOUT_ERROR',\n} as const;\n\n/**\n * Log levels\n */\nexport const LOG_LEVEL_NAMES = {\n  SILENT: 'silent',\n  ERROR: 'error',\n  WARN: 'warn',\n  INFO: 'info',\n  DEBUG: 'debug',\n  TRACE: 'trace',\n} as const;\n\n/**\n * Event names\n */\nexport const EVENT_NAMES = {\n  // Configuration events\n  CONFIG_CREATED: 'config:created',\n  CONFIG_UPDATED: 'config:updated',\n\n  // Transaction events\n  TRANSACTION_BUILDING: 'transaction:building',\n  TRANSACTION_BUILT: 'transaction:built',\n  TRANSACTION_SIGNING: 'transaction:signing',\n  TRANSACTION_SENDING: 'transaction:sending',\n  TRANSACTION_SENT: 'transaction:sent',\n  TRANSACTION_CONFIRMING: 'transaction:confirming',\n  TRANSACTION_CONFIRMED: 'transaction:confirmed',\n  TRANSACTION_FAILED: 'transaction:failed',\n\n  // Trade events\n  TRADE_BUY_STARTED: 'trade:buy_started',\n  TRADE_BUY_COMPLETED: 'trade:buy_completed',\n  TRADE_SELL_STARTED: 'trade:sell_started',\n  TRADE_SELL_COMPLETED: 'trade:sell_completed',\n\n  // Pool events\n  POOL_INITIALIZING: 'pool:initializing',\n  POOL_INITIALIZED: 'pool:initialized',\n  POOL_STATE_FETCHED: 'pool:state_fetched',\n\n  // Account events\n  ACCOUNT_CREATED: 'account:created',\n  ACCOUNT_FETCHED: 'account:fetched',\n\n  // Metadata events\n  METADATA_UPLOADING: 'metadata:uploading',\n  METADATA_UPLOADED: 'metadata:uploaded',\n\n  // Error events\n  ERROR: 'error',\n\n  // Performance events\n  PERFORMANCE_MEASUREMENT: 'performance:measurement',\n} as const;\n","/**\n * Metadata constants\n */\nexport const MAX_METADATA_SIZE = 1000; // Max metadata JSON size in KB\nexport const MAX_IMAGE_SIZE = 10 * 1024 * 1024; // 10MB max image size\nexport const SUPPORTED_IMAGE_TYPES = ['image/jpeg', 'image/png', 'image/gif', 'image/webp'];\n","import { Connection, PublicKey, Keypair, Commitment, Finality } from '@solana/web3.js';\nimport { Program } from '@coral-xyz/anchor';\nimport { LetsBonkIDL, IDL } from './IDL';\n\n// Configuration and errors\nimport { \n  LetsBonkConfig, \n  ResolvedConfig, \n  ConfigManager,\n  SDKLogger\n} from './core';\nimport { Result, SDKError, ConfigurationError, tryAsync } from './core/errors';\n\n// Types and interfaces\nimport { \n  GlobalConfig,\n  PlatformConfig,\n  PoolState,\n  TransactionResult,\n  ConstructedTransaction,\n  BuyParams,\n  SellParams,\n  InitializeParams,\n  InitializeAndBuyParams,\n  CreateTokenMetadata,\n  PriorityFee\n} from './types';\n\n// Managers\nimport { \n  AccountManager, \n  TransactionManager,\n  PoolManager,\n  MetadataManager\n} from './managers';\n\n// Manager-specific types\nimport { \n  TransactionExecutionOptions,\n  MetadataPreparationParams\n} from './types/managers';\n\n// No direct implementation imports - SDK delegates to managers only\n\n/**\n * Main LetsBonkSDK class\n * \n * A modern, type-safe SDK for interacting with the LetsBonk trading protocol.\n * Features modular architecture, comprehensive error handling, and structured logging.\n */\nexport class LetsBonkSDK {\n  private config: ResolvedConfig;\n  private program: Program<LetsBonkIDL>;\n  private logger: SDKLogger;\n  \n  // Public manager instances\n  private readonly accounts: AccountManager;\n  private readonly transactions: TransactionManager;\n  private readonly pools: PoolManager;\n  private readonly metadata: MetadataManager;\n\n  /**\n   * Create a new LetsBonkSDK instance\n   * \n   * @param connection - Solana connection (REQUIRED)\n   * @param config - SDK configuration (optional)\n   */\n  constructor(connection: Connection, config: LetsBonkConfig = {}) {\n    // Create resolved configuration\n    this.config = ConfigManager.create(connection, config);\n    \n    // Initialize logging\n    this.logger = SDKLogger.create({\n      level: this.config.logging?.level || 'info',\n      enabled: this.config.logging?.enabled ?? true,\n      prettyPrint: this.config.logging?.prettyPrint ?? false,\n      context: this.config.logging?.context || {}\n    });\n    this.logger.info('Initializing LetsBonkSDK', {\n      endpoint: this.config.connection.rpcEndpoint\n    });\n\n    // Initialize program\n    this.program = new Program(\n      IDL,\n      this.config.provider\n    );\n\n    // Initialize managers\n    this.accounts = new AccountManager(\n      this.program,\n      this.config.connection,\n      this.logger\n    );\n\n    this.transactions = new TransactionManager(\n      this.program,\n      this.config.connection,\n      this.logger\n    );\n\n    this.pools = new PoolManager(\n      this.program,\n      this.config.connection,\n      this.logger\n    );\n\n    this.metadata = new MetadataManager(\n      this.logger\n    );\n\n    this.logger.info('LetsBonkSDK initialized successfully', {\n      version: '2.0.0',\n      programId: this.config.programId.toString()\n    });\n  }\n\n  // === High-level trading methods ===\n\n  /**\n   * Buy tokens - builds and executes buy transaction\n   * \n   * @param buyer - Keypair of the buyer\n   * @param baseMint - Public key of the base token mint\n   * @param amountIn - Amount of quote tokens (SOL) to spend\n   * @param minimumAmountOut - Minimum tokens to receive (optional)\n   * @param options - Transaction execution options including priority fees\n   */\n  async buy(\n    buyer: Keypair,\n    baseMint: PublicKey,\n    amountIn: bigint,\n    minimumAmountOut?: bigint,\n    options?: TransactionExecutionOptions\n  ): Promise<Result<TransactionResult, SDKError>> {\n    const params: BuyParams = {\n      buyer,\n      baseMint,\n      amountIn,\n      minimumAmountOut: minimumAmountOut || 0n,\n      priorityFees: options?.priorityFees\n    };\n\n    return this.transactions.buyAndExecute(params, options);\n  }\n\n  /**\n   * Sell tokens - builds and executes sell transaction\n   * \n   * @param seller - Keypair of the seller\n   * @param baseMint - Public key of the base token mint\n   * @param amountIn - Amount of base tokens to sell\n   * @param minimumAmountOut - Minimum quote tokens (SOL) to receive (optional)\n   * @param options - Transaction execution options including priority fees\n   */\n  async sell(\n    seller: Keypair,\n    baseMint: PublicKey,\n    amountIn: bigint,\n    minimumAmountOut?: bigint,\n    options?: TransactionExecutionOptions\n  ): Promise<Result<TransactionResult, SDKError>> {\n    const params: SellParams = {\n      seller,\n      baseMint,\n      amountIn,\n      minimumAmountOut: minimumAmountOut || 0n,\n      priorityFees: options?.priorityFees\n    };\n\n    return this.transactions.sellAndExecute(params, options);\n  }\n\n  /**\n   * Initialize a new token pool\n   * \n   * @param payer - Keypair that pays for initialization\n   * @param creator - Public key of the token creator\n   * @param baseMint - Keypair for the new token mint\n   * @param tokenMetadata - Metadata for the new token\n   * @param options - Transaction execution options including priority fees\n   */\n  async initialize(\n    payer: Keypair,\n    creator: PublicKey,\n    baseMint: Keypair,\n    tokenMetadata: CreateTokenMetadata,\n    options?: TransactionExecutionOptions\n  ): Promise<Result<TransactionResult, SDKError>> {\n    const params: InitializeParams = {\n      payer,\n      creator,\n      baseMint,\n      tokenMetadata,\n      priorityFees: options?.priorityFees\n    };\n\n    return this.transactions.initializeAndExecute(params, options);\n  }\n\n  /**\n   * Initialize and buy tokens in a single transaction\n   * This is a convenience method that builds and executes the transaction\n   * \n   * @param payer - Keypair that pays for the transaction\n   * @param creator - Public key of the token creator\n   * @param baseMint - Keypair for the new token mint  \n   * @param tokenMetadata - Metadata for the new token\n   * @param buyAmountLamports - Amount of lamports to spend on buying tokens\n   * @param options - Transaction execution options\n   */\n  async initializeAndBuy(\n    payer: Keypair,\n    creator: PublicKey,\n    baseMint: Keypair,\n    tokenMetadata: CreateTokenMetadata,\n    buyAmountLamports: bigint,\n    options?: TransactionExecutionOptions\n  ): Promise<Result<TransactionResult, SDKError>> {\n    this.logger.info('Starting atomic initializeAndBuy operation', {\n      baseMint: baseMint.publicKey.toString(),\n      creator: creator.toString(),\n      buyAmountLamports: buyAmountLamports.toString()\n    });\n\n    return this.transactions.initializeAndBuyAndExecute(\n      payer,\n      creator,\n      baseMint,\n      tokenMetadata,\n      buyAmountLamports,\n      options\n    );\n  }\n\n\n\n  // === Transaction building (for advanced usage) ===\n\n  /**\n   * Build buy transaction without executing\n   * Note: Priority fees can be specified in the BuyParams.priorityFees field\n   * \n   * @param params - Buy parameters including optional priority fees\n   */\n  async buildBuy(params: BuyParams): Promise<Result<ConstructedTransaction, SDKError>> {\n    return this.transactions.buildBuy(params);\n  }\n\n  /**\n   * Build sell transaction without executing\n   * Note: Priority fees can be specified in the SellParams.priorityFees field\n   * \n   * @param params - Sell parameters including optional priority fees\n   */\n  async buildSell(params: SellParams): Promise<Result<ConstructedTransaction, SDKError>> {\n    return this.transactions.buildSell(params);\n  }\n\n  /**\n   * Build initialize transaction without executing\n   * Note: Priority fees can be specified in the InitializeParams.priorityFees field\n   * \n   * @param params - Initialize parameters including optional priority fees\n   */\n  async buildInitialize(params: InitializeParams): Promise<Result<ConstructedTransaction, SDKError>> {\n    return this.transactions.buildInitialize(params);\n  }\n\n  /**\n   * Build initialize and buy transaction without executing\n   * \n   * @param params - Initialize and buy parameters including optional priority fees\n   */\n  async buildInitializeAndBuy(\n    params: InitializeAndBuyParams\n  ): Promise<Result<ConstructedTransaction, SDKError>> {\n    return this.transactions.buildInitializeAndBuy(\n      params.payer, \n      params.creator, \n      params.baseMint, \n      params.tokenMetadata, \n      params.buyAmountLamports, \n      params.priorityFees\n    );\n  }\n\n  /**\n   * Execute a pre-built transaction\n   * \n   * @param transaction - Pre-built transaction to execute\n   * @param options - Transaction execution options including priority fees\n   */\n  async executeTransaction(\n    transaction: ConstructedTransaction,\n    options?: TransactionExecutionOptions\n  ): Promise<Result<TransactionResult, SDKError>> {\n    return this.transactions.execute(transaction, options);\n  }\n\n    // === Account operations ===\n\n  /**\n   * Get global configuration\n   */\n  async getGlobalConfig(\n    quoteMint?: PublicKey,\n    curveType: number = 0,\n    index: number = 0\n  ): Promise<Result<GlobalConfig, SDKError>> {\n    return this.accounts.getGlobalConfig(quoteMint, curveType, index);\n  }\n\n  /**\n   * Get platform configuration\n   */\n  async getPlatformConfig(\n    platformAdmin?: PublicKey,\n    index: number = 0\n  ): Promise<Result<PlatformConfig, SDKError>> {\n    return this.accounts.getPlatformConfig(platformAdmin, index);\n  }\n\n  /**\n   * Get pool state\n   */\n  async getPoolState(\n    baseMint: PublicKey,\n    quoteMint?: PublicKey\n  ): Promise<Result<PoolState | null, SDKError>> {\n    return this.accounts.getPoolState(baseMint, quoteMint);\n  }\n\n  /**\n   * Check if pool exists\n   */\n  async isPoolExists(\n    baseMint: PublicKey,\n    quoteMint?: PublicKey\n  ): Promise<Result<boolean, SDKError>> {\n    return this.accounts.poolExists(baseMint, quoteMint);\n  }\n\n  // === Metadata operations ===\n\n  /**\n   * Prepare metadata from various inputs\n   */\n  async prepareMetadata(\n    params: MetadataPreparationParams\n  ): Promise<Result<CreateTokenMetadata, SDKError>> {\n    return this.metadata.prepareMetadata(params);\n  }\n\n  /**\n   * Upload metadata to IPFS\n   */\n  async uploadMetadata(\n    metadata: CreateTokenMetadata\n  ): Promise<Result<any, SDKError>> {\n    return this.metadata.uploadMetadata(metadata);\n  }\n\n  // === Pool utilities ===\n\n  /**\n   * Calculate slippage for buy operations\n   */\n  calculateBuySlippage(\n    amountIn: bigint,\n    slippageBasisPoints: bigint = 500n\n  ) {\n    return this.pools.calculateBuySlippage(amountIn, slippageBasisPoints);\n  }\n\n  /**\n   * Calculate slippage for sell operations\n   */\n  calculateSellSlippage(\n    amountIn: bigint,\n    slippageBasisPoints: bigint = 500n\n  ) {\n    return this.pools.calculateSellSlippage(amountIn, slippageBasisPoints);\n  }\n\n  /**\n   * Calculate tokens received for SOL amount\n   */\n  calculateTokensForSOL(\n    solAmount: number,\n    previousSol: number = 30,\n    slippage: number = 5\n  ) {\n    return this.pools.calculateTokensForSOL(solAmount, previousSol, slippage);\n  }\n\n  // === Getter properties for backward compatibility ===\n\n  /**\n   * Get connection instance\n   */\n  get connection(): Connection {\n    return this.config.connection;\n  }\n\n  /**\n   * Get commitment level\n   */\n  get commitment(): Commitment {\n    return this.config.commitment;\n  }\n\n  /**\n   * Get finality level\n   */\n  get finality(): Finality {\n    return this.config.finality;\n  }\n\n  // === Configuration access methods ===\n\n  /**\n   * Get full resolved configuration\n   */\n  getConfig(): ResolvedConfig {\n    return this.config;\n  }\n\n  /**\n   * Get connection instance\n   */\n  getConnection(): Connection {\n    return this.config.connection;\n  }\n\n  /**\n   * Get program instance\n   */\n  getProgram(): Program<LetsBonkIDL> {\n    return this.program;\n  }\n\n  /**\n   * Get logger instance\n   */\n  getLogger(): SDKLogger {\n    return this.logger;\n  }\n\n  /**\n   * Get all managers\n   */\n  getManagers(): { accounts: AccountManager; transactions: TransactionManager; pools: PoolManager; metadata: MetadataManager } {\n    return {\n      accounts: this.accounts,\n      transactions: this.transactions,\n      pools: this.pools,\n      metadata: this.metadata\n    };\n  }\n\n  /**\n   * Update configuration\n   */\n  updateConfig(newConfig: Partial<LetsBonkConfig>): void {\n    this.logger.info('Updating SDK configuration', { newConfig });\n    \n    // This would require reinitializing managers\n    // For now, we'll just log a warning\n    this.logger.warn('Configuration updates require SDK reinitialization');\n  }\n\n  /**\n   * Dispose resources and cleanup\n   */\n  dispose(): void {\n    this.logger.info('Disposing LetsBonkSDK');\n    \n    // Reset singletons\n    SDKLogger.reset();\n    \n    this.logger.info('LetsBonkSDK disposed');\n  }\n} ","import { Connection } from '@solana/web3.js';\nimport { LetsBonkSDK } from './letsbonk-sdk';\nimport { LetsBonkConfig } from './core/config';\n\n/**\n * Create LetsBonkSDK from connection\n * \n * @param connection - Solana connection (REQUIRED)\n * @param config - Additional configuration options (optional)\n * @returns LetsBonkSDK instance\n * \n * Note: Transaction signing happens via Keypair parameters passed to methods,\n * not via any wallet configured in the SDK.\n */\nexport function createSDK(\n  connection: Connection,\n  config: LetsBonkConfig = {}\n): LetsBonkSDK {\n  return new LetsBonkSDK(connection, config);\n}","/**\n * Sleep for a given number of milliseconds\n */\nexport function sleep(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\n/**\n * Retry a function with exponential backoff\n */\nexport async function retryWithBackoff<T>(\n  fn: () => Promise<T>,\n  maxRetries: number = 3,\n  baseDelay: number = 1000\n): Promise<T> {\n  let lastError: Error;\n\n  for (let i = 0; i < maxRetries; i++) {\n    try {\n      return await fn();\n    } catch (error) {\n      lastError = error as Error;\n\n      if (i === maxRetries - 1) {\n        throw lastError;\n      }\n\n      const delay = baseDelay * Math.pow(2, i);\n      await sleep(delay);\n    }\n  }\n\n  throw lastError!;\n}\n"]}