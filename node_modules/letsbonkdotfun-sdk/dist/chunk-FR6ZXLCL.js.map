{"version":3,"sources":["../src/core/config.ts"],"names":["z","PublicKey","ValidationError","ConfigurationError","AnchorProvider"],"mappings":"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","file":"chunk-FR6ZXLCL.js","sourcesContent":["import { Connection, Commitment, Finality, PublicKey } from '@solana/web3.js';\nimport { Provider, AnchorProvider, Wallet } from '@coral-xyz/anchor';\nimport { z } from 'zod';\nimport { ConfigurationError, ValidationError } from './errors';\n\n/**\n * Retry configuration\n */\nexport interface RetryConfig {\n  maxRetries: number;\n  baseDelay: number;\n  maxDelay: number;\n  backoffMultiplier: number;\n}\n\n/**\n * Timeout configuration\n */\nexport interface TimeoutConfig {\n  connection: number;\n  transaction: number;\n  confirmation: number;\n}\n\n/**\n * Logging configuration\n */\nexport interface LoggingConfig {\n  level: 'silent' | 'error' | 'warn' | 'info' | 'debug' | 'trace';\n  enabled: boolean;\n  prettyPrint: boolean;\n  context?: Record<string, unknown>;\n}\n\n/**\n * SDK Configuration interface - simplified to only include non-connection settings\n */\nexport interface LetsBonkConfig {\n  // Program configuration\n  programId?: PublicKey;\n\n  // Connection settings\n  commitment?: Commitment;\n  finality?: Finality;\n\n  // Performance configuration\n  retries?: Partial<RetryConfig>;\n  timeouts?: Partial<TimeoutConfig>;\n\n  // Logging configuration\n  logging?: Partial<LoggingConfig>;\n\n  // Advanced configuration\n  skipPreflight?: boolean;\n  maxConcurrentRequests?: number;\n}\n\n/**\n * Validation schema using Zod\n */\nconst LetsBonkConfigSchema = z.object({\n  // Program configuration\n  programId: z.instanceof(PublicKey).optional(),\n\n  // Connection settings\n  commitment: z.enum(['processed', 'confirmed', 'finalized']).optional(),\n  finality: z.enum(['confirmed', 'finalized']).optional(),\n\n  // Performance configuration\n  retries: z\n    .object({\n      maxRetries: z.number().min(0).optional(),\n      baseDelay: z.number().min(0).optional(),\n      maxDelay: z.number().min(0).optional(),\n      backoffMultiplier: z.number().min(1).optional(),\n    })\n    .optional(),\n\n  timeouts: z\n    .object({\n      connection: z.number().min(0).optional(),\n      transaction: z.number().min(0).optional(),\n      confirmation: z.number().min(0).optional(),\n    })\n    .optional(),\n\n  logging: z\n    .object({\n      level: z.enum(['silent', 'error', 'warn', 'info', 'debug', 'trace']).optional(),\n      enabled: z.boolean().optional(),\n      prettyPrint: z.boolean().optional(),\n      context: z.record(z.any()).optional(),\n    })\n    .optional(),\n\n  // Advanced configuration\n  skipPreflight: z.boolean().optional(),\n  maxConcurrentRequests: z.number().min(1).optional(),\n});\n\n/**\n * Default configuration values\n */\nexport const DEFAULT_CONFIG: Required<LetsBonkConfig> = {\n  commitment: 'confirmed',\n  finality: 'confirmed',\n  programId: new PublicKey('11111111111111111111111111111111'), // Placeholder\n  retries: {\n    maxRetries: 3,\n    baseDelay: 1000,\n    maxDelay: 10000,\n    backoffMultiplier: 2,\n  },\n  timeouts: {\n    connection: 30000,\n    transaction: 60000,\n    confirmation: 120000,\n  },\n  logging: (() => {\n    // Detect test environment and adjust defaults\n    const isTestEnv = process.env.NODE_ENV === 'test' || process.env.JEST_WORKER_ID !== undefined;\n    return {\n      level: isTestEnv ? 'error' : ('info' as const),\n      enabled: true,\n      prettyPrint: !isTestEnv,\n      context: {},\n    };\n  })(),\n  skipPreflight: false,\n  maxConcurrentRequests: 10,\n};\n\n/**\n * Resolved configuration after applying defaults and validation\n */\nexport interface ResolvedConfig extends Required<LetsBonkConfig> {\n  provider: Provider;\n  connection: Connection;\n}\n\n/**\n * Configuration manager class\n */\nexport class ConfigManager {\n  private static instance: ConfigManager;\n  private config: ResolvedConfig | null = null;\n\n  private constructor() {}\n\n  /**\n   * Get singleton instance\n   */\n  static getInstance(): ConfigManager {\n    if (!ConfigManager.instance) {\n      ConfigManager.instance = new ConfigManager();\n    }\n    return ConfigManager.instance;\n  }\n\n  /**\n   * Create configuration from connection and optional config\n   */\n  static create(connection: Connection, userConfig: LetsBonkConfig = {}): ResolvedConfig {\n    const manager = ConfigManager.getInstance();\n    return manager.createConfig(connection, userConfig);\n  }\n\n  /**\n   * Internal method to create and validate configuration\n   */\n  private createConfig(connection: Connection, userConfig: LetsBonkConfig): ResolvedConfig {\n    try {\n      // Validate user configuration\n      const validatedConfig = this.validateConfig(userConfig);\n\n      // Merge with defaults\n      const mergedConfig = this.mergeWithDefaults(validatedConfig);\n\n      // Create provider with dummy wallet for Anchor\n      const provider = this.createProvider(connection, mergedConfig);\n\n      // Create final resolved configuration\n      const resolvedConfig: ResolvedConfig = {\n        ...mergedConfig,\n        provider,\n        connection,\n      };\n\n      // Cache the configuration\n      this.config = resolvedConfig;\n\n      return resolvedConfig;\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        throw new ValidationError(\n          `Configuration validation failed: ${error.errors.map((e: z.ZodIssue) => `${e.path.join('.')}: ${e.message}`).join(', ')}`,\n          'config',\n          userConfig,\n          error\n        );\n      }\n      throw new ConfigurationError(\n        'Failed to create configuration',\n        error instanceof Error ? error : new Error(String(error)),\n        { userConfig }\n      );\n    }\n  }\n\n  /**\n   * Validate user configuration\n   */\n  private validateConfig(config: LetsBonkConfig): LetsBonkConfig {\n    return LetsBonkConfigSchema.parse(config);\n  }\n\n  /**\n   * Merge user configuration with defaults\n   */\n  private mergeWithDefaults(config: LetsBonkConfig): Required<LetsBonkConfig> {\n    return {\n      commitment: config.commitment || DEFAULT_CONFIG.commitment,\n      finality: config.finality || DEFAULT_CONFIG.finality,\n      programId: config.programId || DEFAULT_CONFIG.programId,\n      retries: { ...DEFAULT_CONFIG.retries, ...config.retries },\n      timeouts: { ...DEFAULT_CONFIG.timeouts, ...config.timeouts },\n      logging: { ...DEFAULT_CONFIG.logging, ...config.logging },\n      skipPreflight: config.skipPreflight ?? DEFAULT_CONFIG.skipPreflight,\n      maxConcurrentRequests: config.maxConcurrentRequests || DEFAULT_CONFIG.maxConcurrentRequests,\n    };\n  }\n\n  /**\n   * Create provider with dummy wallet for Anchor program initialization\n   */\n  private createProvider(connection: Connection, config: Required<LetsBonkConfig>): Provider {\n    // Create a dummy wallet for read-only operations\n    const dummyWallet = {\n      publicKey: new PublicKey('11111111111111111111111111111111'),\n      signTransaction: () => Promise.reject(new Error('Read-only wallet')),\n      signAllTransactions: () => Promise.reject(new Error('Read-only wallet')),\n      payer: new PublicKey('11111111111111111111111111111111'),\n    } as unknown as Wallet;\n\n    return new AnchorProvider(connection, dummyWallet, {\n      commitment: config.commitment,\n      skipPreflight: config.skipPreflight,\n    });\n  }\n\n  /**\n   * Get current configuration\n   */\n  getConfig(): ResolvedConfig | null {\n    return this.config;\n  }\n\n  /**\n   * Reset configuration\n   */\n  reset(): void {\n    this.config = null;\n  }\n}\n"]}