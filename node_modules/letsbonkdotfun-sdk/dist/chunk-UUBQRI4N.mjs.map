{"version":3,"sources":["../src/core/errors.ts","../src/core/logger.ts"],"names":["ErrorCategory"],"mappings":"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","file":"chunk-UUBQRI4N.mjs","sourcesContent":["/**\n * Base SDK Error class with structured error information\n */\nexport abstract class SDKError extends Error {\n  abstract readonly code: string;\n  abstract readonly category: ErrorCategory;\n\n  constructor(\n    message: string,\n    public readonly cause?: Error,\n    public readonly context?: Record<string, unknown>\n  ) {\n    super(message);\n    this.name = this.constructor.name;\n\n    // Maintain proper stack trace\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, this.constructor);\n    }\n  }\n\n  /**\n   * Convert error to JSON for logging/serialization\n   */\n  toJSON(): ErrorJSON {\n    return {\n      name: this.name,\n      message: this.message,\n      code: this.code,\n      category: this.category,\n      context: this.context,\n      stack: this.stack,\n      cause: this.cause\n        ? {\n            name: this.cause.name,\n            message: this.cause.message,\n            stack: this.cause.stack,\n          }\n        : undefined,\n    };\n  }\n}\n\n/**\n * Configuration related errors\n */\nexport class ConfigurationError extends SDKError {\n  readonly code = 'CONFIGURATION_ERROR';\n  readonly category = ErrorCategory.Configuration;\n}\n\n/**\n * Validation related errors\n */\nexport class ValidationError extends SDKError {\n  readonly code = 'VALIDATION_ERROR';\n  readonly category = ErrorCategory.Validation;\n\n  constructor(\n    message: string,\n    public readonly field?: string,\n    public readonly value?: unknown,\n    cause?: Error\n  ) {\n    super(message, cause, { field, value });\n  }\n}\n\n/**\n * Network/RPC related errors\n */\nexport class NetworkError extends SDKError {\n  readonly code = 'NETWORK_ERROR';\n  readonly category = ErrorCategory.Network;\n\n  constructor(\n    message: string,\n    public readonly endpoint?: string,\n    public readonly statusCode?: number,\n    cause?: Error\n  ) {\n    super(message, cause, { endpoint, statusCode });\n  }\n}\n\n/**\n * Transaction related errors\n */\nexport class TransactionError extends SDKError {\n  readonly code = 'TRANSACTION_ERROR';\n  readonly category = ErrorCategory.Transaction;\n\n  constructor(\n    message: string,\n    public readonly signature?: string,\n    public readonly instructionIndex?: number,\n    cause?: Error\n  ) {\n    super(message, cause, { signature, instructionIndex });\n  }\n}\n\n/**\n * Account related errors (PDAs, token accounts, etc.)\n */\nexport class AccountError extends SDKError {\n  readonly code = 'ACCOUNT_ERROR';\n  readonly category = ErrorCategory.Account;\n\n  constructor(\n    message: string,\n    public readonly address?: string,\n    public readonly accountType?: string,\n    cause?: Error\n  ) {\n    super(message, cause, { address, accountType });\n  }\n}\n\n/**\n * Program/Smart contract related errors\n */\nexport class ProgramError extends SDKError {\n  readonly code = 'PROGRAM_ERROR';\n  readonly category = ErrorCategory.Program;\n\n  constructor(\n    message: string,\n    public readonly programId?: string,\n    public readonly instructionName?: string,\n    public readonly errorCode?: number,\n    cause?: Error\n  ) {\n    super(message, cause, { programId, instructionName, errorCode });\n  }\n}\n\n/**\n * Timeout related errors\n */\nexport class TimeoutError extends SDKError {\n  readonly code = 'TIMEOUT_ERROR';\n  readonly category = ErrorCategory.Timeout;\n\n  constructor(\n    message: string,\n    public readonly timeoutMs?: number,\n    public readonly operation?: string,\n    cause?: Error\n  ) {\n    super(message, cause, { timeoutMs, operation });\n  }\n}\n\n/**\n * Error categories for better error handling\n */\nexport enum ErrorCategory {\n  Configuration = 'configuration',\n  Validation = 'validation',\n  Network = 'network',\n  Transaction = 'transaction',\n  Account = 'account',\n  Program = 'program',\n  Timeout = 'timeout',\n  Unknown = 'unknown',\n}\n\n/**\n * Error JSON representation\n */\nexport interface ErrorJSON {\n  name: string;\n  message: string;\n  code: string;\n  category: ErrorCategory;\n  context?: Record<string, unknown>;\n  stack?: string;\n  cause?: {\n    name: string;\n    message: string;\n    stack?: string;\n  };\n}\n\n/**\n * Result type for operations that can fail\n */\nexport type Result<T, E extends SDKError = SDKError> =\n  | { success: true; data: T; error?: never }\n  | { success: false; data?: never; error: E };\n\n/**\n * Success result constructor\n */\nexport function success<T>(data: T): Result<T, never> {\n  return { success: true, data };\n}\n\n/**\n * Error result constructor\n */\nexport function failure<E extends SDKError>(error: E): Result<never, E> {\n  return { success: false, error };\n}\n\n/**\n * Utility function to create a Result from a Promise\n */\nexport async function tryAsync<T, E extends SDKError = SDKError>(\n  promise: Promise<T>,\n  errorMapper?: (error: Error) => E\n): Promise<Result<T, E>> {\n  try {\n    const data = await promise;\n    return success(data);\n  } catch (error) {\n    const sdkError = errorMapper\n      ? errorMapper(error as Error)\n      : (new ValidationError('Unknown error occurred', undefined, undefined, error as Error) as E);\n    return failure(sdkError);\n  }\n}\n\n/**\n * Utility function to create a Result from a synchronous operation\n */\nexport function trySync<T, E extends SDKError = SDKError>(\n  fn: () => T,\n  errorMapper?: (error: Error) => E\n): Result<T, E> {\n  try {\n    const data = fn();\n    return success(data);\n  } catch (error) {\n    const sdkError = errorMapper\n      ? errorMapper(error as Error)\n      : (new ValidationError('Unknown error occurred', undefined, undefined, error as Error) as E);\n    return failure(sdkError);\n  }\n}\n\n/**\n * Type guards for error handling\n */\nexport function isSDKError(error: unknown): error is SDKError {\n  return error instanceof SDKError;\n}\n\nexport function isConfigurationError(error: unknown): error is ConfigurationError {\n  return error instanceof ConfigurationError;\n}\n\nexport function isValidationError(error: unknown): error is ValidationError {\n  return error instanceof ValidationError;\n}\n\nexport function isNetworkError(error: unknown): error is NetworkError {\n  return error instanceof NetworkError;\n}\n\nexport function isTransactionError(error: unknown): error is TransactionError {\n  return error instanceof TransactionError;\n}\n\nexport function isAccountError(error: unknown): error is AccountError {\n  return error instanceof AccountError;\n}\n\nexport function isProgramError(error: unknown): error is ProgramError {\n  return error instanceof ProgramError;\n}\n\nexport function isTimeoutError(error: unknown): error is TimeoutError {\n  return error instanceof TimeoutError;\n}\n","import pino, { Logger as PinoLogger, LoggerOptions } from 'pino';\nimport { LoggingConfig } from './config';\n\n/**\n * Log levels supported by the SDK\n */\nexport type LogLevel = 'silent' | 'error' | 'warn' | 'info' | 'debug' | 'trace';\n\n/**\n * Log context for structured logging\n */\nexport interface LogContext {\n  operation?: string;\n  transactionId?: string;\n  signature?: string;\n  address?: string;\n  mint?: string;\n  amount?: string;\n  slippage?: number;\n  duration?: number;\n  error?: unknown;\n  [key: string]: unknown;\n}\n\n/**\n * Performance measurement interface\n */\nexport interface PerformanceTimer {\n  end(context?: LogContext): void;\n}\n\n/**\n * SDK Logger class with structured logging and performance monitoring\n */\nexport class SDKLogger {\n  private logger: PinoLogger;\n  private config: LoggingConfig;\n  private static instance: SDKLogger | undefined;\n\n  constructor(config: LoggingConfig) {\n    this.config = config;\n    this.logger = this.createLogger();\n  }\n\n  /**\n   * Get singleton instance (used internally by SDK)\n   */\n  static getInstance(config?: LoggingConfig): SDKLogger {\n    if (!SDKLogger.instance && config) {\n      SDKLogger.instance = new SDKLogger(config);\n    }\n    if (!SDKLogger.instance) {\n      // Fallback to silent logger if no config provided\n      SDKLogger.instance = new SDKLogger({\n        level: 'silent',\n        enabled: false,\n        prettyPrint: false,\n      });\n    }\n    return SDKLogger.instance;\n  }\n\n  /**\n   * Create a new logger instance\n   */\n  static create(config: LoggingConfig): SDKLogger {\n    return new SDKLogger(config);\n  }\n\n  /**\n   * Reset singleton instance\n   */\n  static reset(): void {\n    SDKLogger.instance = undefined;\n  }\n\n  /**\n   * Create pino logger with configuration\n   */\n  private createLogger(): PinoLogger {\n    if (!this.config.enabled) {\n      return pino({ level: 'silent' });\n    }\n\n    const pinoOptions: LoggerOptions = {\n      level: this.config.level,\n      name: 'letsbonkdotfun-sdk',\n      base: {\n        version: '1.0.0',\n        sdk: 'letsbonk',\n        ...this.config.context,\n      },\n    };\n\n    // Only use pretty printing in non-test environments or when explicitly enabled\n    const isTestEnv = process.env.NODE_ENV === 'test' || process.env.JEST_WORKER_ID !== undefined;\n    const shouldUsePrettyPrint = this.config.prettyPrint && !isTestEnv;\n\n    if (shouldUsePrettyPrint) {\n      try {\n        pinoOptions.transport = {\n          target: 'pino-pretty',\n          options: {\n            colorize: true,\n            translateTime: 'HH:MM:ss Z',\n            ignore: 'pid,hostname',\n            messageFormat: '{sdk} [{level}] {operation}: {msg}',\n          },\n        };\n        return pino(pinoOptions);\n      } catch (error) {\n        // Fallback to simple logging if pino-pretty fails\n        // eslint-disable-next-line no-console\n        console.warn('pino-pretty transport failed, falling back to simple logging:', error);\n      }\n    }\n\n    // Create simple logger without transport\n    return pino(pinoOptions);\n  }\n\n  /**\n   * Create child logger with additional context\n   */\n  child(context: LogContext): SDKLogger {\n    const childLogger = this.logger.child(context);\n    const childInstance = Object.create(this);\n    childInstance.logger = childLogger;\n    return childInstance;\n  }\n\n  /**\n   * Log error message\n   */\n  error(message: string, context?: LogContext): void {\n    this.logger.error(context || {}, message);\n  }\n\n  /**\n   * Log warning message\n   */\n  warn(message: string, context?: LogContext): void {\n    this.logger.warn(context || {}, message);\n  }\n\n  /**\n   * Log info message\n   */\n  info(message: string, context?: LogContext): void {\n    this.logger.info(context || {}, message);\n  }\n\n  /**\n   * Log debug message\n   */\n  debug(message: string, context?: LogContext): void {\n    this.logger.debug(context || {}, message);\n  }\n\n  /**\n   * Log trace message\n   */\n  trace(message: string, context?: LogContext): void {\n    this.logger.trace(context || {}, message);\n  }\n\n  /**\n   * Start performance timer\n   */\n  startTimer(operation: string, context?: LogContext): PerformanceTimer {\n    const startTime = Date.now();\n\n    this.debug(`Starting ${operation}`, {\n      operation,\n      timestamp: startTime,\n      ...context,\n    });\n\n    return {\n      end: (endContext?: LogContext) => {\n        const endTime = Date.now();\n        const duration = endTime - startTime;\n\n        this.info(`Completed ${operation}`, {\n          operation,\n          duration,\n          startTime,\n          endTime,\n          ...context,\n          ...endContext,\n        });\n      },\n    };\n  }\n\n  /**\n   * Log transaction lifecycle events\n   */\n  logTransaction(event: TransactionEvent, context: LogContext): void {\n    const logContext = {\n      ...context,\n      event,\n      timestamp: Date.now(),\n    };\n\n    switch (event) {\n      case 'building':\n        this.debug('Building transaction', logContext);\n        break;\n      case 'built':\n        this.info('Transaction built successfully', logContext);\n        break;\n      case 'signing':\n        this.debug('Signing transaction', logContext);\n        break;\n      case 'sending':\n        this.info('Sending transaction', logContext);\n        break;\n      case 'sent':\n        this.info('Transaction sent', logContext);\n        break;\n      case 'confirming':\n        this.debug('Confirming transaction', logContext);\n        break;\n      case 'confirmed':\n        this.info('Transaction confirmed', logContext);\n        break;\n      case 'failed':\n        this.error('Transaction failed', logContext);\n        break;\n      default:\n        this.debug('Transaction event', logContext);\n    }\n  }\n\n  /**\n   * Log API calls\n   */\n  logApiCall(method: string, endpoint: string, context?: LogContext): PerformanceTimer {\n    return this.startTimer(`API ${method}`, {\n      method,\n      endpoint,\n      ...context,\n    });\n  }\n\n  /**\n   * Log account operations\n   */\n  logAccount(operation: AccountOperation, address: string, context?: LogContext): void {\n    this.info(`Account ${operation}`, {\n      operation,\n      address,\n      ...context,\n    });\n  }\n\n  /**\n   * Log pool operations\n   */\n  logPool(operation: PoolOperation, poolAddress: string, context?: LogContext): void {\n    this.info(`Pool ${operation}`, {\n      operation,\n      poolAddress,\n      ...context,\n    });\n  }\n\n  /**\n   * Log trade operations\n   */\n  logTrade(operation: TradeOperation, context: TradeContext): void {\n    this.info(`Trade ${operation}`, {\n      operation,\n      ...context,\n    });\n  }\n\n  /**\n   * Log errors with stack trace\n   */\n  logError(error: Error, context?: LogContext): void {\n    this.error(error.message, {\n      ...context,\n      error: {\n        name: error.name,\n        message: error.message,\n        stack: error.stack,\n      },\n    });\n  }\n\n  /**\n   * Log configuration changes\n   */\n  logConfig(message: string, config: unknown): void {\n    this.info(message, { config });\n  }\n\n  /**\n   * Get current log level\n   */\n  getLevel(): LogLevel {\n    return this.config.level;\n  }\n\n  /**\n   * Check if logging is enabled for a level\n   */\n  isLevelEnabled(level: LogLevel): boolean {\n    if (!this.config.enabled) return false;\n    return this.logger.isLevelEnabled(level);\n  }\n\n  /**\n   * Update logger configuration\n   */\n  updateConfig(newConfig: Partial<LoggingConfig>): void {\n    this.config = { ...this.config, ...newConfig };\n    this.logger = this.createLogger();\n  }\n}\n\n/**\n * Transaction lifecycle events\n */\nexport type TransactionEvent =\n  | 'building'\n  | 'built'\n  | 'signing'\n  | 'sending'\n  | 'sent'\n  | 'confirming'\n  | 'confirmed'\n  | 'failed';\n\n/**\n * Account operations\n */\nexport type AccountOperation = 'creating' | 'fetching' | 'updating' | 'closing';\n\n/**\n * Pool operations\n */\nexport type PoolOperation = 'initializing' | 'fetching' | 'updating' | 'migrating';\n\n/**\n * Trade operations\n */\nexport type TradeOperation = 'buying' | 'selling' | 'swapping';\n\n/**\n * Trade context for logging\n */\nexport interface TradeContext extends LogContext {\n  mint?: string;\n  amountIn?: string;\n  amountOut?: string;\n  slippage?: number;\n  fee?: string;\n}\n\n/**\n * Create a logger instance (utility function)\n */\nexport function createLogger(config: LoggingConfig): SDKLogger {\n  return SDKLogger.create(config);\n}\n\n/**\n * Get the default logger instance\n */\nexport function getLogger(): SDKLogger {\n  return SDKLogger.getInstance();\n}\n\n/**\n * Log level priorities for external configuration\n */\nexport const LOG_LEVEL_PRIORITIES: Record<LogLevel, number> = {\n  silent: 70,\n  error: 50,\n  warn: 40,\n  info: 30,\n  debug: 20,\n  trace: 10,\n};\n"]}